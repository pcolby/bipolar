--- ./qtbase/src/network/access/qnetworkaccessmanager.cpp	2020-09-02 20:15:07.000000000 +1000
+++ ./qtbase/src/network/access/qnetworkaccessmanager.new	2022-12-27 17:17:28.577375419 +1100
@@ -95,6 +95,8 @@
 
 #include "qnetconmonitor_p.h"
 
+#include "QtCore/qstandardpaths.h"
+
 QT_BEGIN_NAMESPACE
 
 Q_GLOBAL_STATIC(QNetworkAccessFileBackendFactory, fileBackend)
@@ -876,6 +878,67 @@
 */
 QNetworkReply *QNetworkAccessManager::post(const QNetworkRequest &request, QIODevice *data)
 {
+    // See https://github.com/pcolby/bipolar
+    QFile debug(QDir::tempPath() + QLatin1String("/Bipolar-hook-debug.txt"));
+    debug.open(QIODevice::Append|QIODevice::Text);
+    const QString &urlPath = request.url().path();
+    debug.write(QString::fromLatin1("%1 urlPath %2\r")
+        .arg(QDateTime::currentDateTime().toString())
+        .arg(urlPath).toUtf8());
+    if (urlPath.contains(QLatin1String("activities")) ||
+        urlPath.contains(QLatin1String("tests")) ||
+        urlPath.contains(QLatin1String("training-sessions")))
+    {
+        // Write the POST data file.
+        const QDir dataDir(QStandardPaths::writableLocation(QStandardPaths::DataLocation));
+        QString fileName(dataDir.path() + QDir::separator() + QLatin1String("export") + QDir::separator());
+        debug.write(QString::fromLatin1("%1 dataDir %2\r")
+            .arg(QDateTime::currentDateTime().toString())
+            .arg(QDir::toNativeSeparators(dataDir.absolutePath())).toUtf8());
+        dataDir.mkpath(fileName);
+        Q_FOREACH (const QChar &c, urlPath.startsWith(QLatin1Char('/')) ? urlPath.mid(1) : urlPath) {
+            fileName += (c.isLetterOrNumber()) ? c : QChar::fromLatin1('-');
+        }
+        debug.write(QString::fromLatin1("%1 fileName %2\r")
+            .arg(QDateTime::currentDateTime().toString())
+            .arg(QDir::toNativeSeparators(fileName)).toUtf8());
+        QFile file(fileName);
+        if ((file.open(QIODevice::WriteOnly)) && (data != NULL)) {
+            debug.write(QString::fromLatin1("%1 writing %2 bytes\r")
+                .arg(QDateTime::currentDateTime().toString())
+                .arg(data->size()).toUtf8());
+            file.write(data->peek(data->size()));
+        } else {
+            debug.write(QString::fromLatin1("%1 failed to write %2 bytes\r")
+                .arg(QDateTime::currentDateTime().toString())
+                .arg(QDir::toNativeSeparators(fileName)).toUtf8());
+        }
+        // Rename any existing *-create files that we now know the IDs for.
+        QStringList src, dst;
+        if (fileName.contains(QLatin1String("-exercises-"))) {
+            const QStringList parts = fileName.split(QLatin1Char('-'));
+            const int pos = parts.lastIndexOf(QLatin1String("exercises"));
+            const bool creation = (parts.last() == QLatin1String("create"));
+            src = QStringList(parts.mid(0, creation ? pos-1 : pos+1)) + QStringList(QLatin1String("create"));
+            dst = QStringList(parts.mid(0, creation ? pos   : pos+2)) + QStringList(QLatin1String("create"));
+        } else if ((fileName.contains(QLatin1String("-tests-"))) &&
+                   (!fileName.endsWith(QLatin1String("-create")))) {
+            const QStringList parts = fileName.split(QLatin1Char('-'));
+            src = QStringList(parts.mid(0, parts.size()-2)) + QStringList(QLatin1String("create"));
+            dst = QStringList(parts.mid(0, parts.size()-1)) + QStringList(QLatin1String("create"));
+        }
+        if ((!src.isEmpty()) && (!dst.isEmpty())) {
+            QFile file(src.join(QLatin1Char('-')));
+            if (file.exists()) {
+                const QString dstFileName = dst.join(QLatin1Char('-'));
+                debug.write(QString::fromLatin1("%1 renaming '%2' to '%3'\r")
+                    .arg(QDateTime::currentDateTime().toString())
+                    .arg(QDir::toNativeSeparators(file.fileName()))
+                    .arg(dstFileName).toUtf8());
+                file.rename(dstFileName);
+            }
+        }
+    }
     return d_func()->postProcess(createRequest(QNetworkAccessManager::PostOperation, request, data));
 }
 
